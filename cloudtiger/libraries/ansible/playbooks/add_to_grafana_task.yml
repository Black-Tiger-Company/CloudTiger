
# ansible-playbook add_to_grafana.yml -i hosts.yaml --extra-vars "ansible_user=eguibert"
# params: item.vm_name / client / item.domain  / node_exporter_port  / prometheus_workdir

# - hosts: "{{ hosts }}"

#   vars:
#     grafana_workdir: /etc/grafana
#     prometheus_workdir: /etc/prometheus
#     default_domain: btgroup.io
#     default_node_exporter_port: 9100
#     new_vm: "{{ item.vm_name }}.{{ item.domain | default(default_domain) }}:{{ item.node_exporter_port | default(default_node_exporter_port) }}"

#   tasks:

- name: define new VM
  set_fact:
    new_vm: "{{ item.vm_name }}.{{ item.domain | default(default_domain) }}:{{ item.node_exporter_port | default(default_node_exporter_port) }}"

- name: Install dependencies
  become: true
  ansible.builtin.apt:
    pkg:
      - jq

- name: Test
  ansible.builtin.debug:
    msg: "client {{ item.client }}"

# retrieve list of existing client
- name: List of existing client
  ansible.builtin.shell: ls | cut -d '.' -f 1
  register: client_list
  args:
    chdir: "{{ prometheus_workdir }}/targets.conf.d.test"
  become: true

###
## block if client doesn't exist
- name: Display client_list
  ansible.builtin.debug:
    msg: "{{ client_list }}"
  when: item.client not in client_list.stdout_lines

- name: Create client conf
  become: true
  copy:
    dest: "{{ prometheus_workdir }}/targets.conf.d.test/{{ item.client }}.node.json"
    content: |-

      [
        {
            "targets": [
                "{{ item.vm_name }}.{{ item.domain | default(default_domain) }}:{{ item.node_exporter_port | default(default_node_exporter_port) }}"
            ],
            "labels": {
                "client": "{{ item.client }}",
                "env": "{{ item.env }}",
                "job": "node"
            }
        }
      ]
  when: item.client not in client_list.stdout_lines

# retrieve env list existing of the client
- name: "Get list of env for {{ item.client }}"
  become: true
  ansible.builtin.shell: 'grep env {{ item.client }}.node.json | cut -d \" -f 4'
  args:
    chdir: "{{ prometheus_workdir }}/targets.conf.d.test/"
  register: env_list

- name: Display env_list
  ansible.builtin.debug:
    var: env_list.stdout_lines

- name: "Add {{ item.env }} env in {{ item.client }}.node.json"
  become: true
  ansible.builtin.replace:
    path: "{{ prometheus_workdir }}/targets.conf.d.test/{{ item.client }}.node.json"
    regexp: '^(\[)$'
    replace: |-
      [
        {
        "targets": [
              "{{ item.vm_name }}.{{ item.domain | default(default_domain) }}:{{ item.node_exporter_port | default(default_node_exporter_port) }}"
          ],
        "labels": {
              "client": "{{ item.client }}",
              "env": "{{ item.env }}",
              "job": "node"
          }
        },\n
  when:
    - item.client in client_list.stdout_lines
    - item.env not in env_list.stdout_lines

- name: "Get conf from file raw"
  become: true
  ansible.builtin.shell: "cat {{ prometheus_workdir }}'/targets.conf.d.test/{{ item.client }}'.node.json"
  register: prometheus_conf

- name: "Display conf from file in json"
  ansible.builtin.set_fact:
    target_list: "{{ prometheus_conf.stdout  | from_json | selectattr('labels.env','==', item.env) | map(attribute='targets') | first }}"

- name: Display client conf
  ansible.builtin.debug:
    var: target_list

# block if client exist and env also
- name: "Add {{ item.vm_name }} in {{ item.client }}.node.json"
  become: true
  ansible.builtin.shell: echo "$(cat {{ item.client }}.node.json | jq '.[map(.labels.env=="{{ item.env }}") | index(true)].targets += ["{{ new_vm }}"]')" > {{ item.client }}.node.json
  args:
    chdir: "{{ prometheus_workdir }}/targets.conf.d.test/"
  when:
    - item.client in client_list.stdout_lines
    - item.env in env_list.stdout_lines
    - new_vm not in target_list
