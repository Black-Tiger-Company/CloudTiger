# tasks for managing kubernetes TLS secrets used by deployments

- name: delete the k8s secret if exists
  shell: "kubectl delete secret {{ item.name }} -n {{ item.namespace }} --ignore-not-found"
  environment:
    KUBECONFIG : "{{ kubeconfig_path }}"

- block: # inject content in variables

      - name: read the content of the TLS crt
        slurp:
          src: "{{ tls.item['crt'] | default(tls['global']['crt']) }}"
        register: tls_crt

      - name: read the content of the TLS key
        slurp:
          src: "{{ tls.item['key'] | default(tls['global']['key']) }}"
        register: tls_key

      - name: read the content of the TLS ca
        slurp:
          src: "{{ tls.item['ca'] | default(tls['global']['ca']) }}"
        register: tls_ca

      - name: create secret string
        set_fact:
          k8s_string_secret: |-
            {% for k,v in item.format.items() %} --from-literal={{ v }}={{ lookup('vars', k).content }}{% endfor %}

      - name: create namespace if not exists
        shell: kubectl get ns | grep -q '^{{ item.namespace }}' || kubectl create ns {{ item.namespace }}
        environment:
          KUBECONFIG : "{{ kubeconfig_path }}"
        args:
          chdir: "{{ workdir }}"

      - name: effectively create k8s secret
        shell: "kubectl create secret generic {{ item.name }} -n {{ item.namespace }} {{ k8s_string_secret }}"
        environment:
          KUBECONFIG : "{{ kubeconfig_path }}"
        args:
          chdir: "{{ workdir }}"

  when: item.type == 'generic'

- block: # inject content in variables
      - name: create k8s secret
        shell: "kubectl create secret tls {{ item.name }} -n {{ item.namespace }} --cert {{ tls.item['crt'] | default(tls['global']['crt']) }} --key {{ tls.item['key'] | default(tls['global']['key']) }}"
        environment:
          KUBECONFIG : "{{ kubeconfig_path }}"
        args:
          chdir: "{{ workdir }}"
  when: item.type == 'tls'



